name: Build GoPro‑MAX FFmpeg – Windows

on:
  workflow_dispatch:          # click “Run workflow” whenever you need fresh EXEs

jobs:
  win-x64:
    name: Windows‑x64 build
    runs-on: windows-latest

    steps:
    # 1) grab (even empty) repo so GH‑Actions has a workspace
    - uses: actions/checkout@v4

    # 2) MSYS2 with compiler, OpenCL headers *and* runtime loader
    - name: Install MSYS2 toolchain
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: |
          git
          base-devel
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-yasm
          mingw-w64-x86_64-nasm
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-opencl-headers
          mingw-w64-x86_64-opencl-icd        # libOpenCL.dll / import library

    # 3) build a static x264 once (tiny, fast)
    - name: Build static x264
      shell: msys2 {0}
      run: |
        set -e
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure --enable-static --disable-opencl --prefix=/mingw64
        make -j"$(nproc)"
        make install
        cd ..

    # 4) build the GoPro‑MAX FFmpeg fork with OpenCL + libx264
    - name: Build FFmpeg (GoPro fork)
      shell: msys2 {0}
      run: |
        set -e
        git clone --depth 1 https://github.com/gmat/goproMax-ffmpeg-v5.git
        cd goproMax-ffmpeg-v5
        ./configure \
          --target-os=mingw32 --arch=x86_64 \
          --enable-cross-compile \
          --enable-gpl --enable-nonfree \
          --enable-opencl \
          --enable-libx264
        make -j"$(nproc)"
        # park the three binaries in the workspace root
        cp ffmpeg.exe ffprobe.exe libavfi
