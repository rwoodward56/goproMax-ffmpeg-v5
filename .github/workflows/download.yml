name: Build GoPro‑MAX FFmpeg – Windows

on:
  workflow_dispatch:        # manual “Run workflow” button

jobs:
  win-x64:
    name: Windows‑x64 build
    runs-on: windows-latest

    steps:
    # 1) Check out your repo (it can even be empty).
    - uses: actions/checkout@v4

    # 2) Spin up MSYS2 with all the base tools we need.
    - name: Install MSYS2 toolchain
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          git
          base-devel
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-yasm
          mingw-w64-x86_64-nasm
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-opencl-headers

    # 3) Build a static x264 *inside* MSYS2 (keeps everything GPL‑compatible).
    - name: Build static x264
      shell: msys2 {0}
      run: |
        set -e
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure --enable-static --disable-opencl --prefix=/mingw64
        make -j"$(nproc)"
        make install
        cd ..

    # 4) Clone the GoPro fork and build FFmpeg with the OpenCL filter + x264.
    - name: Build FFmpeg (GoPro fork)
      shell: msys2 {0}
      run: |
        set -e
        git clone --depth 1 https://github.com/gmat/goproMax-ffmpeg-v5.git
        cd goproMax-ffmpeg-v5
        ./configure \
          --target-os=mingw32 --arch=x86_64 \
          --enable-cross-compile \
          --enable-gpl --enable-nonfree \
          --enable-opencl \
          --enable-libx264
        make -j"$(nproc)"

        # copy the goodies to the workflow root for easy upload
        cp ffmpeg.exe ffprobe.exe libavfilter/opencl/gopromax_opencl.ptx "$GITHUB_WORKSPACE"

    # 5) Publish the three binaries as an artifact you can download.
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gopro-max-ffmpeg-windows
        path: |
          ffmpeg.exe
          ffprobe.exe
          gopromax_opencl.ptx
