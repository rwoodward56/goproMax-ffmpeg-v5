name: Build GoPro‑MAX FFmpeg (Windows)

# Manually trigger from the “Actions → Run workflow” button.
on:
  workflow_dispatch:

jobs:
  windows:
    name: Windows‑x64 build
    runs-on: windows-latest

    steps:
    # 1 — Check out *your* repository (doesn't need any code inside).
    - uses: actions/checkout@v4

    # 2 — Spin up MSYS2 and install every tool FFmpeg needs, including x264.
    - name: Install MSYS2 + toolchain + x264
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          git
          base-devel
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-yasm
          mingw-w64-x86_64-nasm
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-opencl-headers
          mingw-w64-x86_64-x264   # ← the missing spicy salsa

    # 3 — Clone the GoPro fork and build FFmpeg with the OpenCL filter + x264.
    - name: Build FFmpeg with GoPro filter
      shell: msys2 {0}
      run: |
        set -e
        git clone --depth 1 https://github.com/gmat/goproMax-ffmpeg-v5.git
        cd goproMax-ffmpeg-v5
        ./configure \
          --target-os=mingw32 --arch=x86_64 \
          --enable-cross-compile \
          --enable-gpl --enable-nonfree \
          --enable-opencl \
          --enable-libx264
        make -j"$(nproc)"
        # copy the three goodies to the GitHub workspace root for upload
        cp ffmpeg.exe ffprobe.exe libavfilter/opencl/gopromax_opencl.ptx "$GITHUB_WORKSPACE"

    # 4 — Upload the finished binaries so you can download them from the UI.
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gopro-max-ffmpeg-windows
        path: |
          ffmpeg.exe
          ffprobe.exe
          gopromax_opencl.ptx
